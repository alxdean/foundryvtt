{
  "name": "Channel Divinity: Twilight Sanctuary",
  "type": "feat",
  "img": "systems/dnd5e/icons/skills/violet_26.jpg",
  "data": {
    "description": {
      "value": "<div class=\"rd__b  rd__b--1\"><p><i>2nd-level Twilight Domain feature</i></p><p>You can use your Channel Divinity to refresh your allies with soothing twilight.</p><p>As an action, you present your holy symbol, and a sphere of twilight emanates from you. The sphere is centered on you, has a 30-foot radius, and is filled with dim light. The sphere moves with you, and it lasts for 1 minute or until you are @condition[incapacitated] or die. Whenever a creature (including you) ends its turn in the sphere, you can grant that creature one of these benefits:</p><ul class=\"rd__list\"><li class=\"rd__li \">You grant it temporary hit points equal to [[/r 1d6]] plus your cleric level.</li><li class=\"rd__li \">You end one effect on it causing it to be @condition[charmed] or @condition[frightened].</li></ul></div>",
      "chat": "",
      "unidentified": ""
    },
    "source": "TCE",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": 1,
      "units": "minute"
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": ""
    },
    "range": {
      "value": null,
      "long": null,
      "units": ""
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "attribute",
      "target": "",
      "amount": 1
    },
    "ability": "",
    "actionType": "util",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": null,
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "flat"
    },
    "requirements": "Cleric 2 (Twilight)",
    "recharge": {
      "value": null,
      "charged": false
    }
  },
  "effects": [
    {
      "_id": "UJQsFwhP9p8Avb4F",
      "changes": [
        {
          "key": "macro.itemMacro",
          "mode": 0,
          "value": "@classes.cleric.levels @target",
          "priority": "20"
        }
      ],
      "disabled": false,
      "duration": {
        "startTime": null,
        "seconds": 60
      },
      "icon": "systems/dnd5e/icons/skills/violet_26.jpg",
      "label": "Channel Divinity: Twilight Sanctuary",
      "transfer": false,
      "flags": {
        "dae": {
          "stackable": "none",
          "macroRepeat": "endEveryTurn",
          "specialDuration": [],
          "transfer": false
        },
        "ActiveAuras": {
          "isAura": true,
          "aura": "Allies",
          "radius": 30,
          "alignment": "",
          "type": "",
          "ignoreSelf": false,
          "height": false,
          "hidden": false,
          "hostile": false,
          "onlyOnce": false
        }
      },
      "tint": "",
      "selectedKey": "macro.itemMacro"
    }
  ],
  "sort": 0,
  "flags": {
    "srd5e": {
      "page": "classfeatures.html",
      "source": "TCE",
      "hash": "channel%20divinity%3a%20twilight%20sanctuary_cleric_phb_twilight_tce_2_tce",
      "propDroppable": "subclassFeature"
    },
    "betterRolls5e": {
      "critRange": {
        "type": "String",
        "value": null
      },
      "critDamage": {
        "type": "String",
        "value": ""
      },
      "quickDesc": {
        "type": "Boolean",
        "value": true,
        "altValue": true
      },
      "quickAttack": {
        "type": "Boolean",
        "value": true,
        "altValue": true
      },
      "quickSave": {
        "type": "Boolean",
        "value": true,
        "altValue": true
      },
      "quickDamage": {
        "type": "Array",
        "value": [],
        "altValue": [],
        "context": []
      },
      "quickProperties": {
        "type": "Boolean",
        "value": true,
        "altValue": true
      },
      "quickCharges": {
        "type": "Boolean",
        "value": {
          "use": true,
          "resource": true,
          "charge": true
        },
        "altValue": {
          "use": true,
          "resource": true,
          "charge": true
        }
      },
      "quickTemplate": {
        "type": "Boolean",
        "value": true,
        "altValue": true
      },
      "quickOther": {
        "type": "Boolean",
        "value": true,
        "altValue": true,
        "context": ""
      },
      "quickFlavor": {
        "type": "Boolean",
        "value": true,
        "altValue": true
      },
      "quickPrompt": {
        "type": "Boolean",
        "value": false,
        "altValue": false
      }
    },
    "core": {
      "sourceId": "Compendium.world.ddb-frosty-tales-class-features.kOW5CpACie6d5Hfp"
    },
    "midi-qol": {
      "onUseMacroName": "AA ApplyEffectsToTemplate"
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Channel Divinity: Twilight Sanctuary",
          "type": "script",
          "author": "wBFGbPPyc1l6Cm3j",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "// only works with midi qol and speed roll ability checks\nif (!game.modules.get(\"advanced-macros\")?.active) {ui.notifications.error(\"Please enable the Advanced Macros module\") ;return;}\nlet classMod = args[1]\nconst lastArg = args[args.length - 1];\nlet tactor;\nif (lastArg.tokenId) tactor = canvas.tokens.get(lastArg.tokenId).actor;\nelse tactor = game.actors.get(lastArg.actorId);\n\n    \nif (tactor == undefined) //not actively targeting a user\nreturn;\n\nif (args[0] === \"on\") {\n    //this activates on each person in radius when the aura effect is applied. \n    if (args[2] === lastArg.tokenId) //only if the caster is currently active\n    {\n        token = canvas.tokens.get(lastArg.tokenId);\n        token.setFlag('token-auras', 'aura1.distance', 30);\n        token.setFlag('token-auras', 'aura1.colour', '#e1dd56');\n        token.setFlag('token-auras', 'aura1.opacity', 0.2);        \n\n        let toggleItem = tactor.items.find(i => i.data.flags?.DnDean?.SanctuaryToggle === tactor.id)\n        if (toggleItem === undefined) \n        {\n            await tactor.createOwnedItem({\n                \"name\": \"Toggle Sanctuary Mode\",\n                \"type\": \"feat\",\n                \"img\": \"systems/dnd5e/icons/spells/heal-royal-3.jpg\",\n                \"data\": {\n                  \"activation\": {\n                    \"type\": \"special\",\n                    \"cost\": 1,\n                    \"condition\": \"\"\n                  }\n                },\n                \"flags\": {\n                  \"itemacro\": {\n                    \"macro\": {\n                      \"data\": {\n                        \"_id\": null,\n                        \"name\": \"Toggle SanctuaryMode\",\n                        \"type\": \"script\",                    \n                        \"img\": \"systems/dnd5e/icons/spells/heal-royal-3.jpg\",\n                        \"scope\": \"global\",\n                        \"command\": \"if(game.user.targets.size > 1) return ui.notifications.error(`Please target exactly 1 token.`);  \\n    let tactor;\\n    tactor = game.actors.get(game.user.targets.values().next().value.data.actorId);    \\n    let flag = DAE.getFlag(tactor, 'sanctuarymode')\\n    if (flag!= undefined)\\n    {\\n        DAE.unsetFlag(tactor, 'sanctuarymode');\\n        ChatMessage.create({content: tactor.data.name + \\\" will receive Temp HP at the end of their turn\\\" });\\n    }\\n    else\\n    {\\n        ChatMessage.create({content: tactor.data.name + \\\" will stop being charmed or frightened at the end of their turn\\\" });\\n        DAE.setFlag(tactor, 'sanctuarymode','condition')\\n    }\",\n                        \"folder\": null,\n                        \"sort\": 0,\n                        \"permission\": {\n                          \"default\": 0\n                        },\n                        \"flags\": {}\n                      }\n                    }\n                  },\n                  \"midi-qol\": {\n                    \"onUseMacroName\": \"ItemMacro\"\n                  },\n                  \"DnDean\": {\n                    \"SanctuaryToggle\":\n                        tactor.id\n                  }              \n                }\n              })  \n        }\n      \n    }\n    \n    //TODO: check if the current target is the caster. if so, activate the aura token effect. makes it easier to see the radius for the other players.\n}\n\nif (args[0] === \"each\") {\n    //this activates on each person in radius on the end of their turn.\n\n    let flag = DAE.getFlag(tactor, 'sanctuarymode')\n\n    if (flag != undefined && flag === \"condition\") //remove either frightened or charmed condition\n    {\n        ChatMessage.create({content: \"<h3>Twilight Sanctuary</h3><br>\" + tactor.data.name + \" is no longer charmed or frightened\" });        \n\n        DAE.unsetFlag(tactor, 'sanctuarymode');\n    }\n    else // Add Temp HP\n    {\n        let roll = new Roll('1d6').roll();\n        let newTempHP = classMod + roll.total ;\n\n        if (tactor.data.data.attributes.hp.temp < newTempHP)\n        {\n            ChatMessage.create({content: \"<h3>Twilight Sanctuary</h3><br>New temporary HP for \" + tactor.data.name + \" is [[\" + roll.total + \" + \" + classMod + \"]]. Previous temporary HP was \" + tactor.data.data.attributes.hp.temp + \".\"});        \n            tactor.update({'data.attributes.hp.temp' : newTempHP});\n        }\n        else\n        {\n            ChatMessage.create({content: \"<h3>Twilight Sanctuary</h3><br>New temporary HP for \" + tactor.data.name + \" is [[\" + roll.total + \" + \" + classMod + \"]]. Existing temporary HP was \" + tactor.data.data.attributes.hp.temp + \". Temporary HP remains unchanged.\"})\n        }\n    }\n}\n\nif (args[0] === \"off\") {\n    //this activates on each person where the effect was active and either expired, or the effect on the caster is deleted.     \n    ChatMessage.create({ content: \"<h3>Twilight Sanctuary</h3><br>Twilight Sanctuary effect has ended for \" + tactor.data.name });\n    if (args[2] === lastArg.tokenId) //only if the caster is currently active\n    {\n        let removeItem = tactor.items.find(i => i.data.flags?.DnDean?.SanctuaryToggle === tactor.id)\n        if(removeItem) await tactor.deleteOwnedItem(removeItem.id);\n      \n        token = canvas.tokens.get(lastArg.tokenId);\n        token.setFlag('token-auras', 'aura1.distance', 0);\n    }\n    \n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "exportSource": {
      "world": "frosty-tales",
      "system": "dnd5e",
      "coreVersion": "0.8.8",
      "systemVersion": "1.4.2"
    }
  }
}